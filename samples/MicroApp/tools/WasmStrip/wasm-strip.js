const fs = require('fs');
const path = require('path');
const wastPath = process.argv[2];
const usedFunctionIds = [104,105,106,111,112,113,114,116,117,118,119,120,121,122,123,124,125,136,137,138,140,142,144,146,147,148,150,151,154,155,157,158,160,161,163,164,165,166,167,169,170,171,176,177,178,179,208,209,210,213,214,241,257,269,270,271,289,293,294,316,337,341,366,418,422,423,428,429,430,432,435,438,439,440,441,442,443,450,451,452,457,458,460,461,468,478,482,483,484,488,491,495,499,504,505,506,508,510,512,516,519,520,521,524,526,527,528,534,535,536,537,538,548,549,550,553,554,564,565,566,567,571,572,582,596,600,615,616,617,622,645,646,647,648,649,650,652,653,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,674,676,677,691,692,703,704,705,706,708,709,710,711,712,713,717,718,719,721,725,733,738,745,746,754,764,777,778,779,780,781,782,784,785,787,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,808,809,811,813,814,815,817,818,820,821,822,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,841,844,851,852,853,854,855,856,857,858,859,860,867,870,875,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,897,899,901,902,903,904,905,908,909,911,912,913,916,917,918,921,922,923,924,925,926,927,929,930,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,977,978,979,980,981,982,985,986,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1035,1036,1037,1038,1039,1040,1042,1043,1045,1046,1047,1049,1050,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1065,1068,1069,1074,1076,1077,1078,1079,1080,1081,1082,1085,1088,1089,1092,1093,1095,1097,1098,1099,1100,1101,1104,1105,1106,1107,1108,1109,1111,1116,1117,1122,1123,1124,1125,1126,1127,1135,1170,1173,1178,1179,1191,1192,1193,1194,1195,1196,1198,1213,1214,1215,1216,1217,1218,1219,1220,1223,1224,1225,1226,1227,1229,1236,1239,1240,1241,1243,1244,1253,1254,1255,1260,1262,1266,1268,1271,1272,1281,1282,1314,1318,1320,1322,1331,1332,1336,1344,1345,1346,1354,1355,1356,1360,1361,1362,1363,1364,1365,1366,1367,1370,1372,1373,1375,1376,1377,1379,1385,1388,1389,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1408,1409,1410,1415,1416,1418,1419,1420,1422,1425,1428,1460,1463,1473,1474,1475,1479,1483,1495,1499,1507,1522,1534,1538,1539,1540,1544,1546,1548,1549,1561,1572,1575,1587,1589,1593,1595,1596,1599,1600,1601,1603,1605,1606,1613,1614,1616,1619,1620,1624,1629,1662,1678,1681,1682,1683,1684,1685,1686,1688,1689,1690,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1707,1708,1710,1711,1713,1715,1716,1719,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1743,1748,1750,1751,1752,1753,1756,1757,1758,1759,1761,1762,1763,1764,1766,1767,1768,1769,1770,1774,1785,1786,1787,1789,1797,1798,1799,1806,1807,1808,1809,1810,1811,1812,1813,1824,1825,1826,1827,1828,1829,1831,1832,1833,1835,1836,1838,1839,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1861,1862,1863,1885,1886,1887,1888,1889,1920,1926,1927,1928,1929,1935,1936,1946,1947,1948,1952,1969,1970,1972,1974,1975,2009,2012,2016,2018,2019,2020,2021,2024,2025,2029,2033,2034,2036,2037,2038,2046,2047,2048,2049,2050,2051,2053,2059,2082,2083,2084,2085,2086,2088,2089,2090,2092,2094,2095,2096,2097,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2111,2112,2113,2114,2115,2116,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2142,2143,2145,2146,2148,2149,2151,2152,2153,2154,2156,2157,2158,2159,2160,2161,2162,2164,2165,2167,2168,2169,2170,2171,2172,2173,2175,2176,2177,2178,2179,2180,2181,2182,2184,2185,2186,2188,2191,2192,2193,2194,2197,2198,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2222,2224,2225,2226,2227,2228,2229,2230,2231,2233,2234,2235,2236,2237,2239,2240,2241,2242,2243,2244,2252,2253,2255,2256,2260,2261,2262,2264,2265,2266,2267,2268,2269,2270,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2288,2289,2290,2291,2294,2296,2298,2299,2300,2302,2304,2305,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2321,2322,2323,2326,2327,2329,2330,2343,2344,2356,2357,2359,2360,2364,2386,2387,2388,2389,2390,2391,2392,2412,2435,2438,2440,2441,2442,2443,2445,2446,2447,2448,2450,2451,2452,2453,2455,2456,2466,2467,2542,2563,2564,2565,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2581,2582,2583,2585,2586,2587,2589,2593,2595,2596,2610,2612,2614,2615,2616,2617,2618,2620,2621,2622,2624,2628,2629,2630,2631,2633,2634,2635,2636,2646,2647,2648,2649,2650,2666,2671,2672,2673,2674,2676,2678,2679,2683,2684,2690,2692,2694,2695,2696,2698,2700,2701,2702,2703,2704,2706,2707,2708,2709,2721,2722,2734,2735,2736,2846,2847,2851,2852,2854,2855,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2870,2871,2872,2873,2874,2875,2876,2877,2884,2885,2886,2891,2892,2893,2895,2897,2899,2900,2910,2911,2914,2915,2916,2917,2918,2920,2921,2922,2938,2940,2941,2942,2959,2960,2961,2962,2963,2964,2965,2975,2980,2997,3007,3009,3010,3011,3012,3013,3014,3016,3019,3020,3023,3043,3045,3046,3053,3054,3060,3061,3064,3065,3067,3069,3070,3071,3072,3073,3074,3075,3076,3085,3091,3102,3110,3112,3170,3186,3239,3240,3241,3242,3244,3245,3250,3251,3255,3267,3268,3269,3270,3271,3275,3276,3279,3280,3281,3282,3283,3317,3329,3386,3388,3392,3393,3394,3395,3401,3416,3417,3418,3419,3420,3422,3424,3437,3457,3464,3557,3558,3561,3629,3630,3631,3645,3650,3657,3659,3661,3662,3667,3668,3694,3729,3730,3731,3732,3736,3737,3816,3833,3918,3920,3921,3922,3923,3924,3925,3926,3927,3929,3932,3946,3947,3949,3951,3952,4011,4012,4013,4014,4016,4017,4018,4019,4027,4037,4038,4059,4088,4091,4104,4115,4116,4117,4118,4119,4120,4122,4123,4125,4126,4128,4129,4130,4136,4140,4142,4143,4145,4146,4149,4150,4151,4155,4156,4157,4158,4160,4161,4162,4163,4164,4165,4169,4191,4192,4193,4194,4195,4197,4199,4200,4201,4203,4204,4205,4206,4207,4211,4212,4213,4214,4215,4232,4233,4234,4235,4238,4240,4241,4255,4265,4269,4317,4326,4327,4340,4341,4342,4343,4344,4347,4348,4349,4350,4362,4363,4364,4365,4369,4370,4371,4372,4373,4375,4376,4383,4392,4393,4394,4396,4410,4411,4429,4452,4480,4494,4497,4498,4499,4500,4501,4540,4594,4595,4598,4600,4605,4617,4618,4619,4620,4622,4623,4624,4625,4630,4631,4632,4633,4634,4635,4636,4640,4641,4645,4646,4648,4649,4655,4656,4659,4660,4664,4665,4666,4667,4668,4671,4672,4679,4686,4687,4688,4690,4691,4693,4694,4695,4699,4700,4701,4703,4714,4715,4716,4721,4725,4726,4727,4729,4737,4738,4739,4740,4741,4779,4782,4783,4784,4785,4787,4789,4791,4793,4794,4795,4797,4798,4799,4800,4801,4802,4804,4805,4807,4809,4810,4812,4813,4814,4815,4817,4818,4822,4823,4824,4837,4842,4844,4845,4851,4852,4853,4854,4855,4856,4859,4861,4867,4876,4877,4880,4881,4882,4883,4885,4896,4901,4905,4910,4921,4923,4924,4925,4926,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4942,4948,4949,4951,4953,4955,4956,4957,4998,5009,5012,5013,5014,5015,5018,5019,5020,5021,5022,5024,5025,5026,5027,5028,5031,5033,5034,5036,5037,5038,5051,5052,5053,5054,5067,5069,5070,5072,5073,5075,5088,5089,5090,5092,5095,5096,5097,5098,5099,5103,5104,5106,5109,5110,5111,5121,5128,5129,5130,5131,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5147,5161,5162,5163,5164,5165,5166,5169,5170,5171,5173,5186,5187,5188,5189,5190,5192,5194,5195,5196,5197,5199,5211,5212,5213,5218,5219,5227,5228,5229,5233,5235,5236,5237,5238,5241,5242,5243,5248,5250,5252,5253,5254,5255,5256,5257,5258,5259,5260,5275,5276,5279,5284,5285,5291,5293,5294,5295,5296,5298,5299,5300,5301,5302,5303,5304,5317,5318,5319,5364,5365,5382,5408,5410,5421,5422,5427,5428,5503,5504,5505,5507,5508,5553,5554,5555,5556,5557,5560,5561,5562,5563,5564,5565,5568,5574,5808,5809,5810,5811,5812,5813,5832,5833,5834,5835,5837,5849,5850,5851,5852,5858,5859,5860,5862,5865,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5888,5890,5891,5902,5904,5906,5907,5908,5910,5911,5915,5917,5935,5937,5938,5943,5944,5962,5973,5974,5976,5977,5978,5997,6000,6001,6004,6005,6006,6032,6033,6058,6074,6075,6076,6077,6078,6079,6081,6082,6094,6095,6096,6097,6098];

/*
HOW TO USE
1. In your wasm binary, implement a function that takes an i32 and, when called, passes it through to
   JS code. On the JS side, track which numbers you receive.
2. Convert the original .wasm file to .wast using 'wasm2wat' from https://github.com/WebAssembly/wabt
3. Use the annotateWast function to emit an instrumented version of that .wast file. Each function
   in it will be modified so that it starts by invoking function 115, passing the ID of the caller.
   Change the '115' const to whatever else is the ID of your compiled function from step 1.
3. Convert the instrumented .wast back to .wasm using 'wat2wasm'
4. Run your application using the instrumented .wasm file. After exercising all reachable code paths,
   use the browser debug console to evaluate the list of function IDs that were invoked.
5. Update the 'usedFunctionIds' array above.
6. Use the stripWast function to generate a stripped version of your original .wast file in which all
   the uncalled functions are replaced with empty stubs.
7. Convert the stripped .wast file to .wasm using wat2wasm
8. Use the stripped .wasm file in your application

Optional:
- If you want, also use 'node optimise.js <pathToYourStrippedWasmFile>'. This might reduce the file
  size a bit further by stripping out the unreachable function stubs. However, after compression,
  the difference is probably negligible.
*/

// annotateWast(wastPath);
stripWast(wastPath, usedFunctionIds);

function annotateWast(wastPath) {
    const lines = fs.readFileSync(wastPath, 'utf8').split('\n');
    const outLines = [];
    let currentFunctionId = null;
    for (let line of lines) {
        if (line.startsWith('  (func (;')) {
            currentFunctionId = /\(func \(;(\d+)/.exec(line)[1];
            //const resultTypeMatch = / \(result (.*)\)$/.exec(line);
            //const resultType = resultTypeMatch ? resultTypeMatch[1] : null;
            //console.log(`${currentFunctionId}: ${resultType}`);
        } else if (line.startsWith('    (local ')) {
            // Let locals go before the annotation
        } else if (currentFunctionId) {
            if (currentFunctionId.toString() !== '115') {
                outLines.push(`    i32.const ${currentFunctionId}`);
                outLines.push('    call 115');
            }
            currentFunctionId = null;
        }

        outLines.push(line);
    }

    fs.writeFileSync(wastPath + '.annotated.wast', outLines.join('\n'));
}

function stripWast(wastPath, usedFunctionIds) {
    const lines = fs.readFileSync(wastPath, 'utf8').split('\n');
    const outLines = [];
    let currentFunctionId = null;
    let preserveCurrentFunction;
    for (let line of lines) {
        if (line.startsWith('  (func (;')) {
            currentFunctionId = /\(func \(;(\d+)/.exec(line)[1];
            preserveCurrentFunction = usedFunctionIds.indexOf(parseInt(currentFunctionId)) >= 0;

            if (!preserveCurrentFunction) {
                const resultTypeMatch = / \(result (.*)\)$/.exec(line);
                const resultType = resultTypeMatch ? resultTypeMatch[1] : null;
                outLines.push(line);
                switch (resultType || 'VOID') {
                    case 'VOID': outLines.push('    )'); break;
                    case 'i32': outLines.push('    i32.const 0)'); break;
                    case 'i64': outLines.push('    i64.const 0)'); break;
                    case 'f32': outLines.push('    f32.const 0x0p+0)'); break;
                    case 'f64': outLines.push('    f64.const 0x0p+0)'); break;
                    default: throw new Error(`Unknown result type: ${resultType}`);
                }
            }
        }

        if (!currentFunctionId || preserveCurrentFunction) {
            outLines.push(line);
        }

        if (currentFunctionId && line.endsWith(')') && (line.indexOf('(') < 0)) {
            currentFunctionId = null;
        }
    }

    fs.writeFileSync(wastPath + '.stripped.wast', outLines.join('\n'));
}
